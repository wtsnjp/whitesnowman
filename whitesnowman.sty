%%
%% This is file `whitesnowman.sty'.
%%
%% Copyright (c) 2017 Takuto ASAKURA (wtsnjp)
%%   GitHub:   https://github.com/wtsnjp
%%   Twitter:  @wtsnjp
%%
%% This package is distributed under the MIT License.
%%

% package declaration
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{whitesnowman}[2017/08/08 A language of snowman]
\def\whsn@pkgname{whitesnowman}

% messages
\def\whsn@warn{\PackageWarningNoLine\whsn@pkgname}
\def\whsn@error{\PackageError\whsn@pkgname}

% debug flags
\newif\if@whsn@out@op@type@ \@whsn@out@op@type@true
\newif\if@whsn@out@op@ \@whsn@out@op@true
\newif\if@whsn@out@read@ \@whsn@out@read@false

% new ifs / new counts
\newif\if@whsn@printed@
\newcount\whsn@pc
\newcount\whsn@sp
\newcount\whsn@tmpcnta
\newcount\whsn@calc

% chars
\def\whsn@s{☃}
\def\whsn@t{⛄}
\def\whsn@l{⛇}

%------------------------------------------- utility

% print
\def\whsn@print@op@type#1{%
  \if@whsn@out@op@type@
    \@whsn@printed@true
    \message{^^JOP TYPE: #1}%
  \fi}
\def\whsn@print@op#1{%
  \if@whsn@out@op@
    \@whsn@printed@true
    \message{^^JOP: #1}%
  \fi}
\long\def\whsn@print@read#1{%
  \if@whsn@out@read@
    \@whsn@printed@true
    \message{^^JREAD: \noexpand#1}%
  \fi}

% control sequence
\def\whsn@name@def#1{\expandafter\def\csname #1\endcsname}
\def\whsn@name@edef#1{\expandafter\edef\csname #1\endcsname}

% reverse
\def\whsn@reverse#1{\whsn@reverse@#1\relax\@nil\@empty}
\def\whsn@reverse@#1#2\@nil#3{%
  \ifx#1\relax#3\else
    \whsn@reverse@#2\@nil{#1#3}%
  \fi}

% snowman to number
\def\whsn@number#1#2\@nil{%
  \whsn@calc\z@ \whsn@tmpcnta\@ne
  \edef\whsn@seq{\whsn@reverse{#2}}%
  \expandafter\@tfor\expandafter\whsn@tmp\expandafter:\expandafter=\whsn@seq
    \do{\ifx\whsn@t\whsn@tmp \advance\whsn@calc\whsn@tmpcnta \fi
        \multiply\whsn@tmpcnta\tw@}%
  \def\whsn@tmp{#1}%
  \ifx\whsn@tmp\whsn@t
    \multiply\whsn@calc\m@ne
  \fi}

% read next
\long\def\whsn@next#1#2#3#4#5#6{% cases: ☃ ⛄ ⛇ end ?
  \whsn@print@read{#1}\def\whsn@tmp{#1}%
  \ifx\whsn@s\whsn@tmp\whsn@next@hop@i#2%
  \else\ifx\whsn@t\whsn@tmp\whsn@next@hop@ii#3%
  \else\ifx\whsn@l\whsn@tmp\whsn@next@hop@iii#4%
  \else\ifx\end#1\whsn@next@hop@iv#5%
  \else\whsn@next@hop@v#6\fi\fi\fi\fi}
\long\def\whsn@next@hop@i#1\else#2\fi\fi\fi\fi{\fi #1}
\long\def\whsn@next@hop@ii#1\else#2\fi\fi\fi\fi{\fi\fi #1}
\long\def\whsn@next@hop@iii#1\else#2\fi\fi\fi\fi{\fi\fi\fi #1}
\long\def\whsn@next@hop@iv#1\else#2\fi\fi\fi\fi{\fi\fi\fi\fi #1}
\long\def\whsn@next@hop@v#1\fi\fi\fi\fi{\fi\fi\fi\fi #1}

%------------------------------------------- user interface

\newenvironment{whitesnowman}{%
  \whsn@init
  \whsn@imp@i
}{%
  \whsn@exec
  \whsn@finish
}

%------------------------------------------- initialize / finish

\def\whsn@init{%
  \@whsn@printed@false
  \whsn@pc\z@ \whsn@sp\m@ne}
\def\whsn@finish{%
  \if@whsn@printed@\message{^^J}\fi}

%------------------------------------------- exec

\def\whsn@exec{%
  \edef\whsn@nol{\the\whsn@pc}%
  \whsn@pc\z@
  \@whilenum\whsn@pc<\whsn@nol\do{%
    \@nameuse{whsn@ops@\the\whsn@pc}}}

%------------------------------------------- parser

% add to operation list
\def\whsn@add@ops#1{%
  \whsn@name@def{whsn@ops@\the\whsn@pc}{#1}%
  \advance\whsn@pc\@ne}

% IMP
\long\def\whsn@imp@i#1{%
  \whsn@next#1{%
    \whsn@print@op@type{stack}%
    \whsn@stack@i
  }{%
    \whsn@imp@ii
  }{%
    \whsn@print@op@type{flow}%
  }{%
    \end
  }{%
    \whsn@imp@i
  }}
\long\def\whsn@imp@ii#1{%
  \whsn@next#1{%
    \whsn@print@op@type{arithmetic}%
  }{%
    \whsn@print@op@type{heap}%
  }{%
    \whsn@print@op@type{i/o}%
    \whsn@io@i
  }{%
    \whsn@error
      {End in IMP}
      {Check your whitesnowman code}%
  }{%
    \whsn@imp@ii
  }}

% stack
\def\whsn@stack@i#1{%
  \whsn@next#1{%
    \whsn@print@op{push}%
    \whsn@stack@push
  }{%
    \whsn@stack@ii@t
  }{%
    \whsn@stack@ii@l
  }{%
    \whsn@error
      {Missing stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@stack@i
  }}
\def\whsn@stack@ii@l#1{%
  \whsn@next#1{%
    \whsn@print@op{dup}%
    \whsn@add@ops{\whsn@exec@stack@dup}%
    \whsn@imp@i
  }{%
    \whsn@print@op{swap}%
    \whsn@add@ops{\whsn@exec@stack@swap}%
    \whsn@imp@i
  }{%
    \whsn@print@op{discard}%
    \whsn@add@ops{\whsn@exec@stack@discard}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@stack@ii@l
  }}
\def\whsn@stack@ii@t#1{%
  \whsn@next#1{%
    \whsn@print@op{copy}%
    \whsn@stack@copy
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@stack@ii@t
  }}
\def\whsn@stack@push#1⛇{%
  \whsn@add@ops{\whsn@exec@stack@push#1\@nil}
  \whsn@imp@i}
\def\whsn@stack@copy#1⛇{%
  \whsn@add@ops{\whsn@exec@stack@copy#1\@nil}
  \whsn@imp@i}

% i/o
\def\whsn@io@i#1{%
  \whsn@next#1{%
    \whsn@io@ii@s
  }{%
    \whsn@io@ii@t
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Missing I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@io@i
  }}
\def\whsn@io@ii@s#1{%
  \whsn@next#1{%
    \whsn@print@op{put char}%
    \whsn@add@ops{\whsn@exec@io@putchar}%
    \whsn@imp@i
  }{%
    \whsn@print@op{put number}%
    \whsn@add@ops{\whsn@exec@io@putnumber}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@io@ii@s
  }}
\def\whsn@io@ii@t#1{%
  \whsn@next#1{%
    \whsn@print@op{read char}%
    \whsn@imp@i
  }{%
    \whsn@print@op{read number}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@io@ii@t
  }}

%------------------------------------------- stack

\def\whsn@exec@stack@push#1\@nil{%
  \advance\whsn@pc\@ne
  \whsn@number #1\@nil
  \advance\whsn@sp\@ne
  \whsn@name@edef{whsn@stack@\the\whsn@sp}{\the\whsn@calc}}
\def\whsn@exec@stack@copy#1\@nil{%
  \advance\whsn@pc\@ne
  \whsn@number #1\@nil
  \ifnum\whsn@calc<\@ne
    \whsn@error
      {Cannot specify number < 1 for `stack copy' command}
      {Please specify larger number}%
  \fi
  \advance\whsn@sp\@ne
  \whsn@tmpcnta\whsn@sp \advance\whsn@tmpcnta-\whsn@calc
  \ifnum\whsn@tmpcnta>\m@ne
    \whsn@name@edef{whsn@stack@\the\whsn@sp}%
      {\@nameuse{whsn@stack@\the\whsn@tmpcnta}}%
  \else
    \whsn@error
      {Cannnot access the specified location of the stack}
      {Please specify smaller number}%
  \fi}
\def\whsn@exec@stack@dup{%
  \advance\whsn@pc\@ne
  \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
  \advance\whsn@sp\@ne
  \whsn@name@edef{whsn@stack@\the\whsn@sp}{\whsn@tmp}}
\def\whsn@exec@stack@swap{%
  \advance\whsn@pc\@ne
  \whsn@tmpcnta\whsn@sp \advance\whsn@tmpcnta\m@ne
  \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
  \whsn@name@edef{whsn@stack@\the\whsn@sp}%
    {\@nameuse{whsn@stack@\the\whsn@tmpcnta}}%
  \whsn@name@edef{whsn@stack@\the\whsn@tmpcnta}{\whsn@tmp}}
\def\whsn@exec@stack@discard{%
  \advance\whsn@pc\@ne
  \advance\whsn@sp\m@ne}

%------------------------------------------- i/o

\def\whsn@exec@io@putchar{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\m@ne
    \char\@nameuse{whsn@stack@\the\whsn@sp}%
  \else
    \whsn@warn{Stack is empty}%
  \fi}
\def\whsn@exec@io@putnumber{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\m@ne
    \number\@nameuse{whsn@stack@\the\whsn@sp}%
  \else
    \whsn@warn{Stack is empty}%
  \fi}

% All done
\endinput

%% EOF
