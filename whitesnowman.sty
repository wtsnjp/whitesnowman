%%
%% This is file `whitesnowman.sty'.
%%
%% Copyright (c) 2017 Takuto ASAKURA (wtsnjp)
%%   GitHub:   https://github.com/wtsnjp
%%   Twitter:  @wtsnjp
%%
%% This package is distributed under the MIT License.
%%

% package declaration
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{whitesnowman}[2017/08/08 v1.0 A language of snowmen]
\def\whsn@pkgname{whitesnowman}

% messages
\def\whsn@warn{\PackageWarningNoLine\whsn@pkgname}
\def\whsn@error{\PackageError\whsn@pkgname}

% debug flags
\newif\if@whsn@out@op@type@ \@whsn@out@op@type@true
\newif\if@whsn@out@op@ \@whsn@out@op@true
\newif\if@whsn@out@read@ \@whsn@out@read@false

% new ifs / new counts
\newif\if@whsn@printed@
\newcount\whsn@pc
\newcount\whsn@sp
\newcount\whsn@tmpcnta
\newcount\whsn@calc

% chars
\def\whsn@s{☃}
\def\whsn@t{⛄}
\def\whsn@l{⛇}

%------------------------------------------- utility

% print
\def\whsn@print@op@type#1{%
  \if@whsn@out@op@type@
    \@whsn@printed@true
    \message{^^JOP TYPE: #1}%
  \fi}
\def\whsn@print@op#1{%
  \if@whsn@out@op@
    \@whsn@printed@true
    \message{^^JOP: #1}%
  \fi}
\long\def\whsn@print@read#1{%
  \if@whsn@out@read@
    \@whsn@printed@true
    \message{^^JREAD: \noexpand#1}%
  \fi}

% control sequence
\def\whsn@name@def#1{\expandafter\def\csname #1\endcsname}
\def\whsn@name@edef#1{\expandafter\edef\csname #1\endcsname}

% reverse
\def\whsn@reverse#1{\whsn@reverse@#1\relax\@nil\@empty}
\def\whsn@reverse@#1#2\@nil#3{%
  \ifx#1\relax#3\else
    \whsn@reverse@#2\@nil{#1#3}%
  \fi}

% snowman to number
\long\def\whsn@number#1#2\@nil{%
  \bgroup
    \whsn@calc\z@ \whsn@tmpcnta\@ne
    \edef\whsn@seq{\whsn@reverse{#2}}%
    \expandafter\@tfor\expandafter\whsn@tmp
      \expandafter:\expandafter=\whsn@seq\do{%
        \ifx\whsn@t\whsn@tmp
          \advance\whsn@calc\whsn@tmpcnta
          \multiply\whsn@tmpcnta\tw@
        \fi
        \ifx\whsn@s\whsn@tmp
          \multiply\whsn@tmpcnta\tw@
        \fi}%
    \def\whsn@tmp{#1}%
    \ifx\whsn@tmp\whsn@t
      \multiply\whsn@calc\m@ne
    \fi
    \global\whsn@calc\whsn@calc
  \egroup}

% snowman to label
\long\def\whsn@label#1\@nil{%
  \bgroup
    \let\whsn@seq\@empty
    \@tfor\whsn@tmp=#1\do{%
      \ifx\whsn@t\whsn@tmp
        \edef\whsn@seq{\whsn@seq a}%
      \fi
      \ifx\whsn@s\whsn@tmp
        \edef\whsn@seq{\whsn@seq b}%
      \fi}%
    \xdef\whsn@tmp@label{\whsn@seq}%
  \egroup}

% read next
\long\def\whsn@next#1#2#3#4#5#6{% cases: ☃ ⛄ ⛇ end ?
  \whsn@print@read{#1}\def\whsn@tmp{#1}%
  \ifx\whsn@s\whsn@tmp\whsn@next@hop@i#2%
  \else\ifx\whsn@t\whsn@tmp\whsn@next@hop@ii#3%
  \else\ifx\whsn@l\whsn@tmp\whsn@next@hop@iii#4%
  \else\ifx\end#1\whsn@next@hop@iv#5%
  \else\whsn@next@hop@v#6\fi\fi\fi\fi}
\long\def\whsn@next@hop@i#1\else#2\fi\fi\fi\fi{\fi #1}
\long\def\whsn@next@hop@ii#1\else#2\fi\fi\fi\fi{\fi\fi #1}
\long\def\whsn@next@hop@iii#1\else#2\fi\fi\fi\fi{\fi\fi\fi #1}
\long\def\whsn@next@hop@iv#1\else#2\fi\fi\fi\fi{\fi\fi\fi\fi #1}
\long\def\whsn@next@hop@v#1\fi\fi\fi\fi{\fi\fi\fi\fi #1}

%------------------------------------------- main

% initialize / finish / exec

\def\whsn@init{%
  \@whsn@printed@false
  \whsn@pc\z@ \whsn@sp\m@ne}
\def\whsn@finish{%
  \if@whsn@printed@\message{^^J}\fi}
\def\whsn@exec{%
  \edef\whsn@nol{\the\whsn@pc}%
  \whsn@pc\z@
  \@whilenum\whsn@pc<\whsn@nol\do{%
    \@nameuse{whsn@ops@\the\whsn@pc}}}

% user interface
\newenvironment{whitesnowman}
  {\whsn@init \whsn@imp@i}
  {\whsn@exec \whsn@finish}

%------------------------------------------- parser

% add to operation list
\def\whsn@add@ops#1{%
  \whsn@name@def{whsn@ops@\the\whsn@pc}{#1}%
  \advance\whsn@pc\@ne}

% IMP
\long\def\whsn@imp@i#1{%
  \whsn@next#1{%
    \whsn@print@op@type{stack}%
    \whsn@stack@i
  }{%
    \whsn@imp@ii
  }{%
    \whsn@print@op@type{flow}%
    \whsn@flow@i
  }{%
    \end
  }{%
    \whsn@imp@i
  }}
\long\def\whsn@imp@ii#1{%
  \whsn@next#1{%
    \whsn@print@op@type{arithmetic}%
    \whsn@arithmetic@i
  }{%
    \whsn@print@op@type{heap}%
    \whsn@heap
  }{%
    \whsn@print@op@type{i/o}%
    \whsn@io@i
  }{%
    \whsn@error
      {End in IMP}
      {Check your whitesnowman code}%
  }{%
    \whsn@imp@ii
  }}

% stack
\long\def\whsn@stack@i#1{%
  \whsn@next#1{%
    \whsn@print@op{push}%
    \whsn@stack@push
  }{%
    \whsn@stack@ii@t
  }{%
    \whsn@stack@ii@l
  }{%
    \whsn@error
      {Missing stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@stack@i
  }}
\long\def\whsn@stack@ii@l#1{%
  \whsn@next#1{%
    \whsn@print@op{dup}%
    \whsn@add@ops{\whsn@exec@stack@dup}%
    \whsn@imp@i
  }{%
    \whsn@print@op{swap}%
    \whsn@add@ops{\whsn@exec@stack@swap}%
    \whsn@imp@i
  }{%
    \whsn@print@op{discard}%
    \whsn@add@ops{\whsn@exec@stack@discard}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@stack@ii@l
  }}
\long\def\whsn@stack@ii@t#1{%
  \whsn@next#1{%
    \whsn@print@op{copy}%
    \whsn@stack@copy
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid stack command}
      {Check your whitesnowman code}%
  }{%
    \whsn@stack@ii@t
  }}
\long\def\whsn@stack@push#1⛇{%
  \whsn@number #1\@nil
  \expandafter\whsn@add@ops\expandafter{%
    \expandafter\whsn@exec@stack@push\expandafter{\the\whsn@calc}}%
  \whsn@imp@i}
\long\def\whsn@stack@copy#1⛇{%
  \whsn@number #1\@nil
  \expandafter\whsn@add@ops\expandafter{%
    \expandafter\whsn@exec@stack@copy\expandafter{\the\whsn@calc}}%
  \whsn@imp@i}

% arithmetic
\long\def\whsn@arithmetic@i#1{%
  \whsn@next#1{%
    \whsn@arithmetic@ii@s
  }{%
    \whsn@arithmetic@ii@t
  }{%
    \whsn@error
      {Invalid arithmetic command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Missing arithmetic command}
      {Check your whitesnowman code}%
  }{%
    \whsn@arithmetic@i
  }}
\long\def\whsn@arithmetic@ii@s#1{%
  \whsn@next#1{%
    \whsn@print@op{add}%
    \whsn@add@ops{\whsn@exec@arithmetic@add}%
    \whsn@imp@i
  }{%
    \whsn@print@op{sub}%
    \whsn@add@ops{\whsn@exec@arithmetic@sub}%
    \whsn@imp@i
  }{%
    \whsn@print@op{mul}%
    \whsn@add@ops{\whsn@exec@arithmetic@mul}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid arithmetic command}
      {Check your whitesnowman code}%
  }{%
    \whsn@arithmetic@ii@s
  }}
\long\def\whsn@arithmetic@ii@t#1{%
  \whsn@next#1{%
    \whsn@print@op{div}%
    \whsn@add@ops{\whsn@exec@arithmetic@div}%
    \whsn@imp@i
  }{%
    \whsn@print@op{mod}%
    \whsn@add@ops{\whsn@exec@arithmetic@mod}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid arithmetic command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid arithmetic command}
      {Check your whitesnowman code}%
  }{%
    \whsn@arithmetic@ii@t
  }}

% heap
\long\def\whsn@heap#1{%
  \whsn@next#1{%
    \whsn@print@op{store}%
    \whsn@add@ops{\whsn@exec@heap@store}%
    \whsn@imp@i
  }{%
    \whsn@print@op{retrieve}%
    \whsn@add@ops{\whsn@exec@heap@retrieve}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid heap command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Missing heap command}
      {Check your whitesnowman code}%
  }{%
    \whsn@heap
  }}

% flow
\long\def\whsn@flow@i#1{%
  \whsn@next#1{%
    \whsn@flow@ii@s
  }{%
    \whsn@flow@ii@t
  }{%
    \whsn@flow@ii@l
  }{%
    \whsn@error
      {Missing flow command}
      {Check your whitesnowman code}%
  }{%
    \whsn@flow@i
  }}
\long\def\whsn@flow@ii@s#1{%
  \whsn@next#1{%
    \whsn@print@op{mark location}%
    \whsn@flow@mark
  }{%
    \whsn@print@op{call subroutine}%
    \whsn@flow@call
  }{%
    \whsn@print@op{jump}%
    \whsn@flow@jump
  }{%
    \whsn@error
      {Invalid flow command}
      {Check your whitesnowman code}%
  }{%
    \whsn@flow@ii@s
  }}
\long\def\whsn@flow@ii@t#1{%
  \whsn@next#1{%
    \whsn@print@op{jump if zero}%
    \whsn@flow@jump@z
  }{%
    \whsn@print@op{jump if negative}%
    \whsn@flow@jump@n
  }{%
    \whsn@print@op{exit subroutine}%
    \whsn@add@ops{\whsn@exec@flow@back}%
  }{%
    \whsn@error
      {Invalid flow command}
      {Check your whitesnowman code}%
  }{%
    \whsn@flow@ii@t
  }}
\long\def\whsn@flow@ii@l#1{%
  \whsn@next#1{%
    \whsn@error
      {Invalid flow command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid flow command}
      {Check your whitesnowman code}%
  }{%
    \whsn@print@op{exit}%
    \whsn@add@ops{\whsn@exec@flow@exit}%
  }{%
    \whsn@error
      {Invalid flow command}
      {Check your whitesnowman code}%
  }{%
    \whsn@flow@ii@l
  }}
\long\def\whsn@flow@mark#1⛇{%
  \whsn@label#1\@nil
  \expandafter\whsn@add@ops\expandafter{%
    \expandafter\whsn@exec@flow@mark\expandafter{\whsn@tmp@label}}%
  \whsn@imp@i}
\long\def\whsn@flow@call#1⛇{%
  \whsn@label#1\@nil
  \expandafter\whsn@add@ops\expandafter{%
    \expandafter\whsn@exec@flow@call\expandafter{\whsn@tmp@label}}%
  \whsn@imp@i}
\long\def\whsn@flow@jump#1⛇{%
  \whsn@label#1\@nil
  \expandafter\whsn@add@ops\expandafter{%
    \expandafter\whsn@exec@flow@jump\expandafter{\whsn@tmp@label}}%
  \whsn@imp@i}
\long\def\whsn@flow@jump@z#1⛇{%
  \whsn@label#1\@nil
  \expandafter\whsn@add@ops\expandafter{%
    \expandafter\whsn@exec@flow@jump@z\expandafter{\whsn@tmp@label}}%
  \whsn@imp@i}
\long\def\whsn@flow@jump@n#1⛇{%
  \whsn@label#1\@nil
  \expandafter\whsn@add@ops\expandafter{%
    \expandafter\whsn@exec@flow@jump@n\expandafter{\whsn@tmp@label}}%
  \whsn@imp@i}

% i/o
\long\def\whsn@io@i#1{%
  \whsn@next#1{%
    \whsn@io@ii@s
  }{%
    \whsn@io@ii@t
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Missing I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@io@i
  }}
\long\def\whsn@io@ii@s#1{%
  \whsn@next#1{%
    \whsn@print@op{put char}%
    \whsn@add@ops{\whsn@exec@io@putchar}%
    \whsn@imp@i
  }{%
    \whsn@print@op{put number}%
    \whsn@add@ops{\whsn@exec@io@putnumber}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@io@ii@s
  }}
\long\def\whsn@io@ii@t#1{%
  \whsn@next#1{%
    \whsn@print@op{read char}%
    \whsn@imp@i
  }{%
    \whsn@print@op{read number}%
    \whsn@imp@i
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@error
      {Invalid I/O command}
      {Check your whitesnowman code}%
  }{%
    \whsn@io@ii@t
  }}

%------------------------------------------- stack

\def\whsn@exec@stack@push#1{%
  \advance\whsn@pc\@ne \advance\whsn@sp\@ne
  \whsn@name@edef{whsn@stack@\the\whsn@sp}{#1}}
\def\whsn@exec@stack@copy#1{%
  \advance\whsn@pc\@ne
  \ifnum#1<\@ne
    \whsn@error
      {Cannot specify number < 1 for `stack copy' command}
      {Please specify larger number}%
  \fi
  \advance\whsn@sp\@ne
  \whsn@tmpcnta\whsn@sp \advance\whsn@tmpcnta-#1\relax
  \ifnum\whsn@tmpcnta>\m@ne
    \whsn@name@edef{whsn@stack@\the\whsn@sp}%
      {\@nameuse{whsn@stack@\the\whsn@tmpcnta}}%
  \else
    \whsn@error
      {Cannnot access the specified location of the stack}
      {Please specify smaller number}%
  \fi}
\def\whsn@exec@stack@dup{%
  \advance\whsn@pc\@ne
  \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
  \advance\whsn@sp\@ne
  \whsn@name@edef{whsn@stack@\the\whsn@sp}{\whsn@tmp}}
\def\whsn@exec@stack@swap{%
  \advance\whsn@pc\@ne
  \whsn@tmpcnta\whsn@sp \advance\whsn@tmpcnta\m@ne
  \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
  \whsn@name@edef{whsn@stack@\the\whsn@sp}%
    {\@nameuse{whsn@stack@\the\whsn@tmpcnta}}%
  \whsn@name@edef{whsn@stack@\the\whsn@tmpcnta}{\whsn@tmp}}
\def\whsn@exec@stack@discard{%
  \advance\whsn@pc\@ne
  \advance\whsn@sp\m@ne}

%------------------------------------------- arithmetic

\def\whsn@exec@arithmetic@add{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\z@
    \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \advance\whsn@sp\m@ne
    \whsn@tmpcnta\@nameuse{whsn@stack@\the\whsn@sp}%
    \advance\whsn@tmpcnta\whsn@tmp
    \whsn@name@edef{whsn@stack@\the\whsn@sp}{\the\whsn@tmpcnta}%
  \else
    \whsn@error
      {Stack does not have enough values}
      {Please push something to the stack}%
  \fi}
\def\whsn@exec@arithmetic@sub{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\z@
    \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \advance\whsn@sp\m@ne
    \whsn@tmpcnta\@nameuse{whsn@stack@\the\whsn@sp}%
    \advance\whsn@tmpcnta-\whsn@tmp
    \whsn@name@edef{whsn@stack@\the\whsn@sp}{\the\whsn@tmpcnta}%
  \else
    \whsn@error
      {Stack does not have enough values}
      {Please push something to the stack}%
  \fi}
\def\whsn@exec@arithmetic@mul{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\z@
    \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \advance\whsn@sp\m@ne
    \whsn@tmpcnta\@nameuse{whsn@stack@\the\whsn@sp}%
    \multiply\whsn@tmpcnta\whsn@tmp
    \whsn@name@edef{whsn@stack@\the\whsn@sp}{\the\whsn@tmpcnta}%
  \else
    \whsn@error
      {Stack does not have enough values}
      {Please push something to the stack}%
  \fi}
\def\whsn@exec@arithmetic@div{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\z@
    \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \advance\whsn@sp\m@ne
    \whsn@tmpcnta\@nameuse{whsn@stack@\the\whsn@sp}%
    \divide\whsn@tmpcnta\whsn@tmp
    \whsn@name@edef{whsn@stack@\the\whsn@sp}{\the\whsn@tmpcnta}%
  \else
    \whsn@error
      {Stack does not have enough values}
      {Please push something to the stack}%
  \fi}
\def\whsn@exec@arithmetic@mod{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\z@
    \edef\whsn@tmp{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \advance\whsn@sp\m@ne
    \whsn@tmpcnta\@nameuse{whsn@stack@\the\whsn@sp}%
    \divide\whsn@tmpcnta\whsn@tmp \multiply\whsn@tmpcnta\whsn@tmp
    \advance\whsn@tmpcnta-\@nameuse{whsn@stack@\the\whsn@sp}%
    \multiply\whsn@tmpcnta\m@ne
    \whsn@name@edef{whsn@stack@\the\whsn@sp}{\the\whsn@tmpcnta}%
  \else
    \whsn@error
      {Stack does not have enough values}
      {Please push something to the stack}%
  \fi}

%------------------------------------------- heap

\def\whsn@exec@heap@store{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\z@
    \edef\whsn@val{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \advance\whsn@sp\m@ne
    \edef\whsn@addr{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \advance\whsn@sp\m@ne
    \whsn@name@edef{whsn@heap@\whsn@addr}{\whsn@val}%
  \else
    \whsn@error
      {Stack does not have enough values}
      {Please push something to the stack}%
  \fi}
\def\whsn@exec@heap@retrieve{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\m@ne
    \edef\whsn@addr{\@nameuse{whsn@stack@\the\whsn@sp}}%
    \@ifundefined{whsn@heap@\whsn@addr}{%
      \whsn@error
        {No value in heap at the specified address}
        {Please check the adress}%
    }{%
      \edef\whsn@val{\@nameuse{whsn@heap@\whsn@addr}}%
    }%
    \whsn@name@edef{whsn@stack@\the\whsn@sp}{\whsn@val}%
  \else
    \whsn@error
      {Stack does not have enough values}
      {Please push something to the stack}%
  \fi}

%------------------------------------------- flow

\def\whsn@exec@flow@exit{%
  \whsn@pc\whsn@nol}

%------------------------------------------- i/o

\def\whsn@exec@io@putchar{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\m@ne
    \char\@nameuse{whsn@stack@\the\whsn@sp}%
  \else
    \whsn@warn{Stack is empty}%
  \fi}
\def\whsn@exec@io@putnumber{%
  \advance\whsn@pc\@ne
  \ifnum\whsn@sp>\m@ne
    \number\@nameuse{whsn@stack@\the\whsn@sp}%
  \else
    \whsn@warn{Stack is empty}%
  \fi}

% All done
\endinput

%% EOF
